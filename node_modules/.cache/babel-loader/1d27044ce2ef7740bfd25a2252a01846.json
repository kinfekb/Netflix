{"ast":null,"code":"var _jsxFileName = \"/Users/kinfebekele/Desktop/EVANGADI/phase-3 /Netflix-clone-master/netflixclone/src/Row.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"./axios\";\nimport \"./Row.css\";\nimport YouTube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({\n  title,\n  fetchUrl,\n  isLargeRow\n}) {\n  _s();\n\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n\n    fetchData();\n  }, [fetchUrl]);\n  console.log(movies);\n  const opts = {\n    heighr: \"390\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1\n    }\n  };\n\n  const handleClick = movie => {\n    if (trailerUrl) {\n      setTrailerUrl('');\n    } else {\n      movieTrailer((movie === null || movie === void 0 ? void 0 : movie.title) || \"\").then(url => {\n        const urlParams = new URLSearchParams(new URL(url).search);\n        setTrailerUrl(urlParams.get('v'));\n      }).catch(error => console.log(error));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this) // <div className=\"row\">\n  //   <h2>{title}</h2>\n  //   <div className=\"row__posters\">\n  //     {movies.map((movie) => (\n  //       <img\n  //         key={movie.id}\n  //         onClick={() => handleClick(movie)}\n  //         className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n  //         src={`${base_url}${\n  //           isLargeRow ? movie.poster_path : movie.backdrop_path\n  //         }`}\n  //         alt={movie.name}\n  //       />\n  //     ))}\n  //   </div>\n  //   <div style={{ padding: \"40px\"}}>\n  //    {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\n  //   </div>\n  // </div>\n  ;\n}\n\n_s(Row, \"k63ruaDr6ck94JTzLN3dN+sD/HM=\");\n\n_c = Row;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["/Users/kinfebekele/Desktop/EVANGADI/phase-3 /Netflix-clone-master/netflixclone/src/Row.js"],"names":["React","useState","useEffect","axios","YouTube","movieTrailer","base_url","Row","title","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","fetchData","request","get","data","results","console","log","opts","heighr","width","playerVars","autoplay","handleClick","movie","then","url","urlParams","URLSearchParams","URL","search","catch","error"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAO,WAAP;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,YAAP,MAAyB,eAAzB;;AAEA,MAAMC,QAAQ,GAAG,sCAAjB;;AAEA,SAASC,GAAT,CAAa;AAAEC,EAAAA,KAAF;AAASC,EAAAA,QAAT;AAAmBC,EAAAA;AAAnB,CAAb,EAA8C;AAAA;;AAE5C,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBX,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACY,UAAD,EAAaC,aAAb,IAA8Bb,QAAQ,CAAC,EAAD,CAA5C;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAea,SAAf,GAA2B;AACzB,YAAMC,OAAO,GAAG,MAAMb,KAAK,CAACc,GAAN,CAAUR,QAAV,CAAtB;AACAG,MAAAA,SAAS,CAACI,OAAO,CAACE,IAAR,CAAaC,OAAd,CAAT;AACA,aAAOH,OAAP;AACD;;AACDD,IAAAA,SAAS;AACV,GAPQ,EAON,CAACN,QAAD,CAPM,CAAT;AAQAW,EAAAA,OAAO,CAACC,GAAR,CAAYV,MAAZ;AACA,QAAMW,IAAI,GAAG;AACXC,IAAAA,MAAM,EAAE,KADG;AAEXC,IAAAA,KAAK,EAAE,MAFI;AAGXC,IAAAA,UAAU,EAAE;AACVC,MAAAA,QAAQ,EAAE;AADA;AAHD,GAAb;;AAOA,QAAMC,WAAW,GAAIC,KAAD,IAAW;AAC7B,QAAGf,UAAH,EAAc;AACZC,MAAAA,aAAa,CAAC,EAAD,CAAb;AACD,KAFD,MAEM;AACJT,MAAAA,YAAY,CAAC,CAAAuB,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEpB,KAAP,KAAgB,EAAjB,CAAZ,CACCqB,IADD,CACOC,GAAD,IAAS;AACb,cAAMC,SAAS,GAAG,IAAIC,eAAJ,CAAoB,IAAIC,GAAJ,CAAQH,GAAR,EAAaI,MAAjC,CAAlB;AACApB,QAAAA,aAAa,CAACiB,SAAS,CAACd,GAAV,CAAc,GAAd,CAAD,CAAb;AACD,OAJD,EAKCkB,KALD,CAKQC,KAAD,IAAWhB,OAAO,CAACC,GAAR,CAAYe,KAAZ,CALlB;AAMD;AACF,GAXD;;AAaA,sBACE;AAAA,2BACE;AAAA,gBAAK5B;AAAL;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF,CAIE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtBF;AAwBD;;GAzDQD,G;;KAAAA,G;AA2DT,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"./axios\";\nimport \"./Row.css\";\nimport YouTube from \"react-youtube\"\nimport movieTrailer from \"movie-trailer\"\n\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({ title, fetchUrl, isLargeRow }) {\n  \n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\")\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n    fetchData();\n  }, [fetchUrl]);\n  console.log(movies)\n  const opts = {\n    heighr: \"390\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1,\n    }\n  }\n  const handleClick = (movie) => {\n    if(trailerUrl){\n      setTrailerUrl('')\n    }else {\n      movieTrailer(movie?.title || \"\")\n      .then((url) => {\n        const urlParams = new URLSearchParams(new URL(url).search)\n        setTrailerUrl(urlParams.get('v'))\n      })\n      .catch((error) => console.log(error))\n    }\n  }\n\n  return (\n    <div>\n      <h2>{title}</h2>\n    </div>\n    // <div className=\"row\">\n    //   <h2>{title}</h2>\n    //   <div className=\"row__posters\">\n    //     {movies.map((movie) => (\n    //       <img\n    //         key={movie.id}\n    //         onClick={() => handleClick(movie)}\n    //         className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n    //         src={`${base_url}${\n    //           isLargeRow ? movie.poster_path : movie.backdrop_path\n    //         }`}\n    //         alt={movie.name}\n    //       />\n    //     ))}\n    //   </div>\n    //   <div style={{ padding: \"40px\"}}>\n    //    {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\n    //   </div>\n    // </div>\n  );\n}\n\nexport default Row;\n"]},"metadata":{},"sourceType":"module"}